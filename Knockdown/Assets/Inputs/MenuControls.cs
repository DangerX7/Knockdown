//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/MenuControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MenuControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MenuControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuControls"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""7a694484-7954-48e0-b9c7-1d34f225c98d"",
            ""actions"": [
                {
                    ""name"": ""ShowInfo"",
                    ""type"": ""Button"",
                    ""id"": ""786416b8-5959-4e54-a6b6-f98c75a9e802"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6f29380b-7219-46ca-962f-e0f5477a1436"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""d9789375-2f82-45d6-868f-69433440de5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""81cbc6eb-307c-44a2-bc3f-ab14ac8533f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoUp"",
                    ""type"": ""Button"",
                    ""id"": ""dfa3ab79-d01c-485b-b772-df843be15192"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoDown"",
                    ""type"": ""Button"",
                    ""id"": ""5ae94a27-c051-4222-8c5e-9a6aaf05d763"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoLeft"",
                    ""type"": ""Button"",
                    ""id"": ""626945da-0cc6-458d-baa8-b355e7495d02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoRight"",
                    ""type"": ""Button"",
                    ""id"": ""bbea9a76-341b-4599-9abf-51676d00220e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""911e9f35-497b-4500-b19e-f61869acb48b"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ShowInfo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa76e792-cd6a-4194-bb1e-56139cde0baa"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""650a0b7c-f966-4154-8082-41aece5919ad"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69a9895e-f79e-4cca-8730-a74e88fb9fa0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""GoUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1707efa-e628-477f-aa85-52e22e54bd76"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""GoDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3eafa992-c838-4f3f-a89e-087059169241"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""GoLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0dd421fe-d1d8-4dc5-990f-1e36e757a0ac"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""GoRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""486fcf38-6016-443c-9c45-ee7f8e79998a"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_ShowInfo = m_Menu.FindAction("ShowInfo", throwIfNotFound: true);
        m_Menu_Pause = m_Menu.FindAction("Pause", throwIfNotFound: true);
        m_Menu_Return = m_Menu.FindAction("Return", throwIfNotFound: true);
        m_Menu_Restart = m_Menu.FindAction("Restart", throwIfNotFound: true);
        m_Menu_GoUp = m_Menu.FindAction("GoUp", throwIfNotFound: true);
        m_Menu_GoDown = m_Menu.FindAction("GoDown", throwIfNotFound: true);
        m_Menu_GoLeft = m_Menu.FindAction("GoLeft", throwIfNotFound: true);
        m_Menu_GoRight = m_Menu.FindAction("GoRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_ShowInfo;
    private readonly InputAction m_Menu_Pause;
    private readonly InputAction m_Menu_Return;
    private readonly InputAction m_Menu_Restart;
    private readonly InputAction m_Menu_GoUp;
    private readonly InputAction m_Menu_GoDown;
    private readonly InputAction m_Menu_GoLeft;
    private readonly InputAction m_Menu_GoRight;
    public struct MenuActions
    {
        private @MenuControls m_Wrapper;
        public MenuActions(@MenuControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShowInfo => m_Wrapper.m_Menu_ShowInfo;
        public InputAction @Pause => m_Wrapper.m_Menu_Pause;
        public InputAction @Return => m_Wrapper.m_Menu_Return;
        public InputAction @Restart => m_Wrapper.m_Menu_Restart;
        public InputAction @GoUp => m_Wrapper.m_Menu_GoUp;
        public InputAction @GoDown => m_Wrapper.m_Menu_GoDown;
        public InputAction @GoLeft => m_Wrapper.m_Menu_GoLeft;
        public InputAction @GoRight => m_Wrapper.m_Menu_GoRight;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @ShowInfo.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnShowInfo;
                @ShowInfo.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnShowInfo;
                @ShowInfo.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnShowInfo;
                @Pause.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPause;
                @Return.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnReturn;
                @Return.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnReturn;
                @Return.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnReturn;
                @Restart.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnRestart;
                @GoUp.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoUp;
                @GoUp.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoUp;
                @GoUp.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoUp;
                @GoDown.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoDown;
                @GoDown.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoDown;
                @GoDown.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoDown;
                @GoLeft.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoLeft;
                @GoLeft.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoLeft;
                @GoLeft.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoLeft;
                @GoRight.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoRight;
                @GoRight.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoRight;
                @GoRight.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoRight;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShowInfo.started += instance.OnShowInfo;
                @ShowInfo.performed += instance.OnShowInfo;
                @ShowInfo.canceled += instance.OnShowInfo;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Return.started += instance.OnReturn;
                @Return.performed += instance.OnReturn;
                @Return.canceled += instance.OnReturn;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @GoUp.started += instance.OnGoUp;
                @GoUp.performed += instance.OnGoUp;
                @GoUp.canceled += instance.OnGoUp;
                @GoDown.started += instance.OnGoDown;
                @GoDown.performed += instance.OnGoDown;
                @GoDown.canceled += instance.OnGoDown;
                @GoLeft.started += instance.OnGoLeft;
                @GoLeft.performed += instance.OnGoLeft;
                @GoLeft.canceled += instance.OnGoLeft;
                @GoRight.started += instance.OnGoRight;
                @GoRight.performed += instance.OnGoRight;
                @GoRight.canceled += instance.OnGoRight;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMenuActions
    {
        void OnShowInfo(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnReturn(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnGoUp(InputAction.CallbackContext context);
        void OnGoDown(InputAction.CallbackContext context);
        void OnGoLeft(InputAction.CallbackContext context);
        void OnGoRight(InputAction.CallbackContext context);
    }
}
